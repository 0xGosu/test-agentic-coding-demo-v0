name: claude-code-review

# This example demonstrates how to use the track_progress feature to get
# visual progress tracking for PR reviews, similar to v0.x agent mode.
# this example is not being used in other repository workflows.

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]

jobs:
  claude-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create MCP Config
        run: |
          cat > /tmp/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "gosu": {
                "type": "stdio",
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "0xgosu/gosu-mcp-server"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GOSU_GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
        
      - name: Claude Code Review
        id: code-review
        uses: anthropics/claude-code-action@v1
        # Optional: Skip claude code review for certain conditions
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Enable progress tracking
          track_progress: true
          # Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          use_sticky_comment: true
          # Optional: allow commits from listed bots to trigger this code review
          allowed_bots: "claude"

          # Your custom review instructions
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}
            
            Perform a comprehensive code review with the following focus areas:
            
            0. **Prerequisite**
               - Read repository level code review instructions at ghpr-code-review/CLAUDE.md. If this file does not exist, You MUST use `mcp__gosu__get_prompt` tool to retrieve the prompt with id: "ghpr-code-review-template" and use it as the review instructions.
            
            1. **Code Quality**
               - Clean code principles and best practices
               - Proper error handling and edge cases
               - Code readability and maintainability

            2. **Security**
               - Check for potential security vulnerabilities
               - Validate input sanitization
               - Review authentication/authorization logic

            3. **Performance**
               - Identify potential performance bottlenecks
               - Review database queries for efficiency
               - Check for memory leaks or resource issues

            4. **Testing**
               - Verify adequate test coverage
               - Review test quality and edge cases
               - Check for missing test scenarios

            5. **Documentation**
               - Ensure code is properly documented
               - Verify README.md updates for new features
               - Check API documentation accuracy
               - Verify CLAUDE.md instructions are aligned with code changes

            MUST provide detailed feedback using inline comments for specific issues. Use the mcp__github_inline_comment__create_inline_comment tool to submit inline comments for specific code issues. You MUST set `path`, `line` and `side` parameters correctly based on the review feedback code locations.
            You MUST NOT use mcp__github_inline_comment__create_inline_comment for positive feedback/praise, only use it for code issues that need to be addressed.
            For general observations or praise, add/update to the top-level comment by using mcp__github_comment__update_claude_comment tool.
            IMPORTANT: When there are existing review comments from yourself (<review_comments> [Review by claude at ...]) on the PR, you MUST NOT create any duplicate comments. Instead, you MUST validate if these comments are still relevant or not (e.g. if the code has changed to address this comment or has been removed since the comment was made). If they are still relevant, use the mcp__github_comment__update_claude_comment tool to provide additional context or details if needed to resolve these existing issues. If they are no longer relevant, simply ignore them. You MUST NOT create new comments for issues that have already been raised in existing comments, focus on new code changes that has been added since the last review and provide feedback for only new issues found.

          # Configure Claude's behavior with CLI arguments
          claude_args: |
            --model sonnet
            --max-turns 100
            --mcp-config /tmp/mcp-config.json
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh label:*),Bash(gh search:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr status:*),Bash(gh pr checks:*),Bash(gh pr list:*),Bash(gh issue:*)"
            --system-prompt "You MUST plan carefully so that you can finish this code review within 100 turns (each TODO can take you about 5-10 turns to complete). You should use the appropriate sub agents to help you with the review such as: `gosu-code-reviewer`, `gosu-spec-reviewer`. You can speed up the review process by invoking multiple sub agents in parallel if needed. Try to group related files together in a single sub agent invocation to save turns."
        # Allow this step to fail without failing the entire job
        continue-on-error: true
      
      - run: echo "OK"
        if: job.steps.code-review.status == failure()

# When track_progress is enabled:
# - Creates a tracking comment with progress checkboxes
# - Includes all PR context (comments, attachments, images)
# - Updates progress as the review proceeds
# - Marks as completed when done